package in.neelesh.online.shopping.serviceImpl;

import java.util.Base64;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.kafka.common.Uuid;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import in.neelesh.online.shopping.dto.ProductCreateDto;
import in.neelesh.online.shopping.dto.ProductResponseDto;
import in.neelesh.online.shopping.entity.Product;
import in.neelesh.online.shopping.entity.ProductImage;
import in.neelesh.online.shopping.repository.ProductImageRepository;
import in.neelesh.online.shopping.repository.ProductRepository;
import in.neelesh.online.shopping.service.ProductService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ProductServiceImpl implements ProductService {

	private final ProductRepository productRepository;
	private final ProductImageRepository productImageRepository;

	@Override
	public Product createProduct(ProductCreateDto productdto, String storeManagerId, List<MultipartFile> images,
			String realm) {
		checkProductNotExistsForUser(productdto.name(), storeManagerId);
		Product product = new Product();
		product.setName(productdto.name());
		product.setDescription(productdto.description());
		product.setPrice(productdto.price());
		product.setUserId(storeManagerId);
		product.setId(Uuid.randomUuid().toString());

		if (images != null && !images.isEmpty()) {
			for (MultipartFile file : images) {
				try {
					ProductImage image = new ProductImage();
					image.setImageData(file.getBytes());
					image.setProduct(product);
					image.setId(Uuid.randomUuid().toString());
					product.getImages().add(image);
				} catch (Exception e) {
					throw new RuntimeException("Failed to read image file: " + file.getOriginalFilename(), e);
				}
			}
		}
		return productRepository.save(product);
	}

	private void checkProductNotExistsForUser(String name, String storeManagerId) {
		boolean exists = productRepository.existsByNameAndUserId(name, storeManagerId);
		if (exists) {
			throw new IllegalArgumentException("Product with name '" + name + "' already exists for this user.");
		}
	}

	public List<ProductResponseDto> getProductsByStoreManager(String storeManagerId, String realm) {
		List<Product> products = productRepository.findByUserIdAndRealm(storeManagerId, realm);
		return products.stream().map(prod ->{
			List<String> image = prod.getImages().stream().map(img -> Base64.getEncoder().encodeToString(img.getImageData())).collect(Collectors.toList());
			
			return new ProductResponseDto(prod.getId(), storeManagerId, realm, null, image);
		});
	}
}
